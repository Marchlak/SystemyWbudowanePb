// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/10/2024 20:37:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux_4_1_2_bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_4_1_2_bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] S;
reg [1:0] U;
reg [1:0] V;
reg [1:0] W;
reg [1:0] X;
// wires                                               
wire [1:0] M;

// assign statements (if any)                          
mux_4_1_2_bits i1 (
// port map - connection between master ports and signals/registers   
	.M(M),
	.S(S),
	.U(U),
	.V(V),
	.W(W),
	.X(X)
);
initial 
begin 
#160000 $finish;
end 
// S[ 1 ]
always
begin
	S[1] = 1'b0;
	S[1] = #10000 1'b1;
	#10000;
end 
// S[ 0 ]
always
begin
	S[0] = 1'b0;
	S[0] = #5000 1'b1;
	#5000;
end 
// U[ 1 ]
always
begin
	U[1] = 1'b0;
	U[1] = #20000 1'b1;
	#20000;
end 
// U[ 0 ]
always
begin
	U[0] = 1'b0;
	U[0] = #10000 1'b1;
	#10000;
end 
// V[ 1 ]
initial
begin
	V[1] = 1'b0;
	# 10000;
	repeat(3)
	begin
		V[1] = 1'b1;
		V[1] = #20000 1'b0;
		# 20000;
	end
	V[1] = 1'b1;
	V[1] = #20000 1'b0;
end 
// V[ 0 ]
initial
begin
	repeat(7)
	begin
		V[0] = 1'b1;
		V[0] = #10000 1'b0;
		# 10000;
	end
	V[0] = 1'b1;
	V[0] = #10000 1'b0;
end 
// W[ 1 ]
initial
begin
	repeat(3)
	begin
		W[1] = 1'b1;
		W[1] = #20000 1'b0;
		# 20000;
	end
	W[1] = 1'b1;
	W[1] = #20000 1'b0;
end 
// W[ 0 ]
always
begin
	W[0] = 1'b0;
	W[0] = #10000 1'b1;
	#10000;
end 
// X[ 1 ]
initial
begin
	X[1] = 1'b1;
	# 10000;
	repeat(3)
	begin
		X[1] = 1'b0;
		X[1] = #20000 1'b1;
		# 20000;
	end
	X[1] = 1'b0;
	X[1] = #20000 1'b1;
end 
// X[ 0 ]
initial
begin
	repeat(7)
	begin
		X[0] = 1'b1;
		X[0] = #10000 1'b0;
		# 10000;
	end
	X[0] = 1'b1;
	X[0] = #10000 1'b0;
end 
endmodule

